/*
 * generated by Xtext 2.30.0
 */
package adrf.xtext.ide.contentassist.antlr;

import adrf.xtext.ide.contentassist.antlr.internal.InternalTypoDSLParser;
import adrf.xtext.services.TypoDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TypoDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TypoDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TypoDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlocksAccess().getAlternatives(), "rule__Blocks__Alternatives");
			builder.put(grammarAccess.getInlineItemAccess().getAlternatives(), "rule__InlineItem__Alternatives");
			builder.put(grammarAccess.getDocumentAccess().getGroup(), "rule__Document__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getSubsectionAccess().getGroup(), "rule__Subsection__Group__0");
			builder.put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
			builder.put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
			builder.put(grammarAccess.getImageAccess().getGroup_8(), "rule__Image__Group_8__0");
			builder.put(grammarAccess.getCodeBlockAccess().getGroup(), "rule__CodeBlock__Group__0");
			builder.put(grammarAccess.getItemizeAccess().getGroup(), "rule__Itemize__Group__0");
			builder.put(grammarAccess.getListItemAccess().getGroup(), "rule__ListItem__Group__0");
			builder.put(grammarAccess.getNormalAccess().getGroup(), "rule__Normal__Group__0");
			builder.put(grammarAccess.getBoldAccess().getGroup(), "rule__Bold__Group__0");
			builder.put(grammarAccess.getItalicAccess().getGroup(), "rule__Italic__Group__0");
			builder.put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
			builder.put(grammarAccess.getDocumentAccess().getTitleAssignment_3(), "rule__Document__TitleAssignment_3");
			builder.put(grammarAccess.getDocumentAccess().getAuthorAssignment_5(), "rule__Document__AuthorAssignment_5");
			builder.put(grammarAccess.getDocumentAccess().getDatetimeAssignment_7(), "rule__Document__DatetimeAssignment_7");
			builder.put(grammarAccess.getDocumentAccess().getTldrAssignment_9(), "rule__Document__TldrAssignment_9");
			builder.put(grammarAccess.getDocumentAccess().getBlocksAssignment_10(), "rule__Document__BlocksAssignment_10");
			builder.put(grammarAccess.getSectionAccess().getTitleAssignment_1(), "rule__Section__TitleAssignment_1");
			builder.put(grammarAccess.getSectionAccess().getBlocksAssignment_2(), "rule__Section__BlocksAssignment_2");
			builder.put(grammarAccess.getSubsectionAccess().getTitleAssignment_1(), "rule__Subsection__TitleAssignment_1");
			builder.put(grammarAccess.getSubsectionAccess().getBlocksAssignment_2(), "rule__Subsection__BlocksAssignment_2");
			builder.put(grammarAccess.getParagraphAccess().getInlineitemsAssignment_1(), "rule__Paragraph__InlineitemsAssignment_1");
			builder.put(grammarAccess.getImageAccess().getUrlAssignment_3(), "rule__Image__UrlAssignment_3");
			builder.put(grammarAccess.getImageAccess().getWidthAssignment_5(), "rule__Image__WidthAssignment_5");
			builder.put(grammarAccess.getImageAccess().getHeightAssignment_7(), "rule__Image__HeightAssignment_7");
			builder.put(grammarAccess.getImageAccess().getCaptionAssignment_8_1(), "rule__Image__CaptionAssignment_8_1");
			builder.put(grammarAccess.getCodeBlockAccess().getLanguageAssignment_3(), "rule__CodeBlock__LanguageAssignment_3");
			builder.put(grammarAccess.getCodeBlockAccess().getTextAssignment_5(), "rule__CodeBlock__TextAssignment_5");
			builder.put(grammarAccess.getItemizeAccess().getItemsAssignment_1(), "rule__Itemize__ItemsAssignment_1");
			builder.put(grammarAccess.getListItemAccess().getInlineAssignment_1(), "rule__ListItem__InlineAssignment_1");
			builder.put(grammarAccess.getNormalAccess().getTextAssignment_1(), "rule__Normal__TextAssignment_1");
			builder.put(grammarAccess.getBoldAccess().getTextAssignment_1(), "rule__Bold__TextAssignment_1");
			builder.put(grammarAccess.getItalicAccess().getTextAssignment_1(), "rule__Italic__TextAssignment_1");
			builder.put(grammarAccess.getLinkAccess().getUrlAssignment_3(), "rule__Link__UrlAssignment_3");
			builder.put(grammarAccess.getLinkAccess().getTextAssignment_5(), "rule__Link__TextAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TypoDSLGrammarAccess grammarAccess;

	@Override
	protected InternalTypoDSLParser createParser() {
		InternalTypoDSLParser result = new InternalTypoDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TypoDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TypoDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
