/*
 * generated by Xtext 2.30.0
 */
package adrf.xtext.serializer;

import adrf.xtext.services.TypoDSLGrammarAccess;
import adrf.xtext.typoDSL.Bold;
import adrf.xtext.typoDSL.CodeBlock;
import adrf.xtext.typoDSL.Document;
import adrf.xtext.typoDSL.Image;
import adrf.xtext.typoDSL.Italic;
import adrf.xtext.typoDSL.Itemize;
import adrf.xtext.typoDSL.Link;
import adrf.xtext.typoDSL.ListItem;
import adrf.xtext.typoDSL.Normal;
import adrf.xtext.typoDSL.Paragraph;
import adrf.xtext.typoDSL.Section;
import adrf.xtext.typoDSL.Subsection;
import adrf.xtext.typoDSL.TypoDSLPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TypoDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TypoDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TypoDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypoDSLPackage.BOLD:
				sequence_Bold(context, (Bold) semanticObject); 
				return; 
			case TypoDSLPackage.CODE_BLOCK:
				sequence_CodeBlock(context, (CodeBlock) semanticObject); 
				return; 
			case TypoDSLPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case TypoDSLPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case TypoDSLPackage.ITALIC:
				sequence_Italic(context, (Italic) semanticObject); 
				return; 
			case TypoDSLPackage.ITEMIZE:
				sequence_Itemize(context, (Itemize) semanticObject); 
				return; 
			case TypoDSLPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case TypoDSLPackage.LIST_ITEM:
				sequence_ListItem(context, (ListItem) semanticObject); 
				return; 
			case TypoDSLPackage.NORMAL:
				sequence_Normal(context, (Normal) semanticObject); 
				return; 
			case TypoDSLPackage.PARAGRAPH:
				sequence_Paragraph(context, (Paragraph) semanticObject); 
				return; 
			case TypoDSLPackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			case TypoDSLPackage.SUBSECTION:
				sequence_Subsection(context, (Subsection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     InlineItem returns Bold
	 *     Bold returns Bold
	 *
	 * Constraint:
	 *     text=STRING
	 * </pre>
	 */
	protected void sequence_Bold(ISerializationContext context, Bold semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoldAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Blocks returns CodeBlock
	 *     CodeBlock returns CodeBlock
	 *
	 * Constraint:
	 *     (language=STRING text=STRING)
	 * </pre>
	 */
	protected void sequence_CodeBlock(ISerializationContext context, CodeBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.CODE_BLOCK__LANGUAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.CODE_BLOCK__LANGUAGE));
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.CODE_BLOCK__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.CODE_BLOCK__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeBlockAccess().getLanguageSTRINGTerminalRuleCall_3_0(), semanticObject.getLanguage());
		feeder.accept(grammarAccess.getCodeBlockAccess().getTextSTRINGTerminalRuleCall_5_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     (title=STRING author=STRING datetime=DATE tldr=STRING blocks+=Blocks*)
	 * </pre>
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Blocks returns Image
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (url=STRING width=INT height=INT caption=STRING?)
	 * </pre>
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InlineItem returns Italic
	 *     Italic returns Italic
	 *
	 * Constraint:
	 *     text=STRING
	 * </pre>
	 */
	protected void sequence_Italic(ISerializationContext context, Italic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItalicAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Blocks returns Itemize
	 *     Itemize returns Itemize
	 *
	 * Constraint:
	 *     items+=ListItem+
	 * </pre>
	 */
	protected void sequence_Itemize(ISerializationContext context, Itemize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InlineItem returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (url=STRING text=STRING)
	 * </pre>
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.LINK__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.LINK__URL));
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getUrlSTRINGTerminalRuleCall_3_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getLinkAccess().getTextSTRINGTerminalRuleCall_5_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ListItem returns ListItem
	 *
	 * Constraint:
	 *     inline+=InlineItem
	 * </pre>
	 */
	protected void sequence_ListItem(ISerializationContext context, ListItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InlineItem returns Normal
	 *     Normal returns Normal
	 *
	 * Constraint:
	 *     text=STRING
	 * </pre>
	 */
	protected void sequence_Normal(ISerializationContext context, Normal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TypoDSLPackage.Literals.INLINE_ITEM__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Blocks returns Paragraph
	 *     Paragraph returns Paragraph
	 *
	 * Constraint:
	 *     inlineitems+=InlineItem+
	 * </pre>
	 */
	protected void sequence_Paragraph(ISerializationContext context, Paragraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Blocks returns Section
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (title=STRING blocks+=Blocks*)
	 * </pre>
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Blocks returns Subsection
	 *     Subsection returns Subsection
	 *
	 * Constraint:
	 *     (title=STRING blocks+=Blocks*)
	 * </pre>
	 */
	protected void sequence_Subsection(ISerializationContext context, Subsection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
