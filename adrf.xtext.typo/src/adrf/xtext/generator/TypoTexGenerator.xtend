package adrf.xtext.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import adrf.xtext.typoDSL.Document;
import adrf.xtext.typoDSL.Blocks;
import adrf.xtext.typoDSL.Section;
import adrf.xtext.typoDSL.Subsection;
import adrf.xtext.typoDSL.Paragraph;
import adrf.xtext.typoDSL.InlineItem;
import org.eclipse.emf.common.util.EList;
import adrf.xtext.typoDSL.Normal;
import adrf.xtext.typoDSL.Bold;
import adrf.xtext.typoDSL.Italic;
import adrf.xtext.typoDSL.Link;
import adrf.xtext.typoDSL.Image;
import adrf.xtext.typoDSL.CodeBlock;
import adrf.xtext.typoDSL.Itemize;

/**
 * Generates LaTeX code from your model files on save.
 */
class TypoTexGenerator extends AbstractGenerator {

  
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	    var document = resource.contents.head as Document
    	
        fsa.generateFile(
            resource.className() + ".tex",
            toLaTeX(document)
        );
    }

    def toLaTeX(Document document) '''
    % This document was automatically generated by Typo
    \documentclass{article}
    \usepackage[utf8]{inputenc}
    \usepackage{hyperref}
    \usepackage{graphicx}
    \usepackage{listings}
    \usepackage{color}
    \usepackage{geometry}
    \usepackage{fancyhdr}
    \usepackage{abstract}
    
    % Configure code listings
    \definecolor{codebg}{rgb}{0.95,0.95,0.95}
    \lstset{
        backgroundcolor=\color{codebg},
        basicstyle=\ttfamily\small,
        breaklines=true,
        captionpos=b,
        frame=single
    }
    
    % Configure page geometry
    \geometry{a4paper, margin=1in}
    
    % Header and footer settings
    \pagestyle{fancy}
    \fancyhf{}
    \rhead{«document.author»}
    \lhead{«document.title»}
    \cfoot{\thepage}
    
    «getHeader(document)»
    
    \begin{document}
    
    \maketitle
    
    \begin{abstract}
    «document.tldr»
    \end{abstract}
    
    «renderBlocks(document)»
    
    \end{document}
    '''

    def className(Resource res) {
        var name = res.URI.lastSegment;
        return name.substring(0, name.indexOf('.'));
    }

    def getHeader(Document document) '''
    \title{«document.title.escapeLatex()»}
    \author{«document.author.escapeLatex()»}
    \date{«document.datetime.replace('"', '').escapeLatex()»}
    '''

    def renderBlocks(Document document) {
        var res = "";
        for (block : document.blocks) {
            res += renderBlock(block);
        }
        return res;
    }

    def renderBlock(Blocks block) {
        var res = "";
        var className = block.eClass().getName();
        switch (className) {
            case "Section": {
                res += renderBlock(block as Section);
            }
            case "Subsection": {
                res += renderBlock(block as Subsection);
            }
            case "Paragraph": {
                res += renderBlock(block as Paragraph);
            }
            case "Image": {
                res += renderBlock(block as Image);
                
            }
            case "CodeBlock": {
                res += renderBlock(block as CodeBlock);
            }
            case "Itemize": {
                res += renderBlock(block as Itemize);
            }
            default: {
                System.err.println("Error rendering the block" + block);
            }
        }
        res += "\n";
        return res;
    }

    def renderBlock(Section section) '''
    \section{«section.title.escapeLatex()»}
    
    «FOR b : section.blocks»
    «renderBlock(b)»
    «ENDFOR»
    '''

    def renderBlock(Subsection subsection) '''
    \subsection{«subsection.title.escapeLatex()»}
    
    «FOR b : subsection.blocks»
    «renderBlock(b)»
    «ENDFOR»
    '''

    def renderBlock(Paragraph paragraph) '''
    «renderInline(paragraph.inlineitems)»
    
    '''

    def renderInline(EList<InlineItem> list) {
        var res = "";
        for (inline : list) {
            var className = inline.eClass().getName();
            switch (className) {
                case "Normal": {
                    var normal = inline as Normal;
                    res += normal.text.escapeLatex();
                }
                case "Bold": {
                    var bold = inline as Bold;
                    res += "\\textbf{" + bold.text.escapeLatex() + "}";
                }
                case "Italic": {
                    var italic = inline as Italic;
                    res += "\\textit{" + italic.text.escapeLatex() + "}";
                }
                case "Link": {
                    var link = inline as Link;
                    res += "\\href{" + link.url + "}{" + link.text.escapeLatex() + "}";
                }
                default: {
                    res += inline.text.escapeLatex();
                }
            }
        }
        return res;
    }

    def renderBlock(Image image) '''
    \begin{figure}[htbp]
        \centering
        % You need to download the image in order to visualize it
        \includegraphics[width=«image.width»pt, height=«image.height»pt]{«image.url»}
        «IF image.caption !== null»
        \caption{«image.caption.escapeLatex()»}
        «ENDIF»
    \end{figure}
    '''

    def renderBlock(CodeBlock code) '''
    \begin{lstlisting}[language=«code.language.latexLanguageMap()»]
    «code.text»
    \end{lstlisting}
    '''

    def renderBlock(Itemize itemize) '''
    \begin{itemize}
    «FOR item : itemize.items»
        \item «renderInline(item.inline)»
    «ENDFOR»
    \end{itemize}
    '''
    
    /**
     * Helper method to escape LaTeX special characters
     */
    def escapeLatex(String text) {
        if (text === null) return "";
        return text
            .replace("\\", "\\textbackslash{}")
            .replace("&", "\\&")
            .replace("%", "\\%")
            .replace("$", "\\$")
            .replace("#", "\\#")
            .replace("_", "\\_")
            .replace("{", "\\{")
            .replace("}", "\\}")
            .replace("~", "\\textasciitilde{}")
            .replace("^", "\\textasciicircum{}");
    }
    
    /**
     * Maps common programming language names to LaTeX listings package language names
     */
    def latexLanguageMap(String language) {
        switch (language.toLowerCase()) {
            case "js": return "JavaScript"
            case "javascript": return "JavaScript"
            case "ts": return "JavaScript"
            case "typescript": return "JavaScript"
            case "py": return "Python"
            case "python": return "Python"
            case "cpp": return "C++"
            case "c++": return "C++"
            case "cs": return "C#"
            case "csharp": return "C#"
            case "rb": return "Ruby"
            case "ruby": return "Ruby"
            case "php": return "PHP"
            case "html": return "HTML"
            case "css": return "CSS"
            case "sql": return "SQL"
            case "sh": return "bash"
            case "bash": return "bash"
            case "tex": return "TeX"
            case "latex": return "TeX"
            case "xml": return "XML"
            default: return language
        }
    }
}