package adrf.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import adrf.xtext.typoDSL.Document
import adrf.xtext.typoDSL.Blocks
import adrf.xtext.typoDSL.Section
import adrf.xtext.typoDSL.Subsection
import adrf.xtext.typoDSL.Paragraph
import adrf.xtext.typoDSL.InlineItem
import org.eclipse.emf.common.util.EList
import adrf.xtext.typoDSL.Normal
import adrf.xtext.typoDSL.Bold
import adrf.xtext.typoDSL.Italic
import adrf.xtext.typoDSL.Link
import adrf.xtext.typoDSL.Image
import adrf.xtext.typoDSL.CodeBlock
import adrf.xtext.typoDSL.Itemize

/**
 * Generates markdown code from your model files on save.
 */
class TypoMDGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(
			resource.className + ".md",
			toMd(resource.contents.head as Document)
		)	
	}
		
	def toMd(Document document) '''
	> [!IMPORTANT]
	> This document was automatically generated by Typo
	«getHeader(document)»
	«renderBlocks(document)»
	'''
	
	def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.' )) 
	}
	
	
	def getHeader(Document document) '''
	# «document.title»
	
	**Author**: «document.author»
	
	**Date**: «document.datetime.replace('"', '')»
	
	**TL;DR**: «document.tldr»
	
	---
	
	'''
	
	def renderBlocks(Document document) {
		var res = ""
		for (block : document.blocks) {
			res += renderBlock(block)
		}
		return res
	}
	
	def renderBlock(Blocks block) {
		var res = ""
		var className = block.eClass.name
		switch (className) {
			case "Section": {
				res += renderBlock(block as Section)
			}
			case "Subsection": {
				res += renderBlock(block as Subsection)
			}
			case "Paragraph": {
				res += renderBlock(block as Paragraph)
			}
			case "Image": {
				res += renderBlock(block as Image)
			}
			case "CodeBlock": {
				res += renderBlock(block as CodeBlock)
			}
			case "Itemize": {
				res += renderBlock(block as Itemize)
			}
			default: {
				System.err.println("Error rendering the block" + block)
			}
		}
		res += "\n"
		return res
	}
	
	def renderBlock(Section section)'''
	## «section.title»
	
	«FOR b : section.blocks»
	«renderBlock(b)»
	«ENDFOR»
	'''
	
	def renderBlock(Subsection subsection) '''
	### «subsection.title»
	
	«FOR b : subsection.blocks»
	«renderBlock(b)»
	«ENDFOR»
	'''
	
	def renderBlock(Paragraph paragraph)'''
	«renderInline(paragraph.inlineitems)»
	'''
		
	def renderInline(EList<InlineItem> list) {
		var res = ""
		for (inline:list) {
			var className = inline.eClass.name
			switch (className) {
				case "Normal": {
					var normal = inline as Normal
					res+=normal.text
				}
				case "Bold": {
					var bold = inline as Bold
					res+="**" + bold.text + "**"
				}
				case "Italic": {
					var italic = inline as Italic
					res+="*" + italic.text + "*"
				}
				case "Link": {
					var link = inline as Link
					res+="["+ link.text + "]" + "(" + link.url + ")"
				}
				default: {
					res+=inline.text
				}
			}
		}
		res += "\n"
		return res	
	}
	

	
	def renderBlock(Image image)'''
	<p align="center">
	  <img src="«image.url»" width="«image.width»" height="«image.height»" alt="«IF image.caption !== null »«image.caption»«ELSE»Image«ENDIF»"/>
	</p>
	'''
	
	def renderBlock(CodeBlock code)'''
	```«code.language»
	«code.text»
	```
	'''
	
	def renderBlock(Itemize itemize)'''
	«FOR item : itemize.items»
	- «renderInline(item.inline)»
	«ENDFOR»
	'''
	
}
