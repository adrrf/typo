package adrf.xtext.generator;

import adrf.xtext.typoDSL.Blocks;
import adrf.xtext.typoDSL.Bold;
import adrf.xtext.typoDSL.CodeBlock;
import adrf.xtext.typoDSL.Document;
import adrf.xtext.typoDSL.Image;
import adrf.xtext.typoDSL.InlineItem;
import adrf.xtext.typoDSL.Italic;
import adrf.xtext.typoDSL.Itemize;
import adrf.xtext.typoDSL.Link;
import adrf.xtext.typoDSL.ListItem;
import adrf.xtext.typoDSL.Normal;
import adrf.xtext.typoDSL.Paragraph;
import adrf.xtext.typoDSL.Section;
import adrf.xtext.typoDSL.Subsection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates LaTeX code from your model files on save.
 */
@SuppressWarnings("all")
public class TypoTexGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Document document = ((Document) _head);
    String _className = this.className(resource);
    String _plus = (_className + ".tex");
    fsa.generateFile(_plus, 
      this.toLaTeX(document));
  }

  public CharSequence toLaTeX(final Document document) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("% This document was automatically generated by Typo");
    _builder.newLine();
    _builder.append("\\documentclass{article}");
    _builder.newLine();
    _builder.append("\\usepackage[utf8]{inputenc}");
    _builder.newLine();
    _builder.append("\\usepackage{hyperref}");
    _builder.newLine();
    _builder.append("\\usepackage{graphicx}");
    _builder.newLine();
    _builder.append("\\usepackage{listings}");
    _builder.newLine();
    _builder.append("\\usepackage{color}");
    _builder.newLine();
    _builder.append("\\usepackage{geometry}");
    _builder.newLine();
    _builder.append("\\usepackage{fancyhdr}");
    _builder.newLine();
    _builder.append("\\usepackage{abstract}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("% Configure code listings");
    _builder.newLine();
    _builder.append("\\definecolor{codebg}{rgb}{0.95,0.95,0.95}");
    _builder.newLine();
    _builder.append("\\lstset{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("backgroundcolor=\\color{codebg},");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("basicstyle=\\ttfamily\\small,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("breaklines=true,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("captionpos=b,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("frame=single");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("% Configure page geometry");
    _builder.newLine();
    _builder.append("\\geometry{a4paper, margin=1in}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("% Header and footer settings");
    _builder.newLine();
    _builder.append("\\pagestyle{fancy}");
    _builder.newLine();
    _builder.append("\\fancyhf{}");
    _builder.newLine();
    _builder.append("\\rhead{");
    String _author = document.getAuthor();
    _builder.append(_author);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.append("\\lhead{");
    String _title = document.getTitle();
    _builder.append(_title);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.append("\\cfoot{\\thepage}");
    _builder.newLine();
    _builder.newLine();
    CharSequence _header = this.getHeader(document);
    _builder.append(_header);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\\begin{document}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\maketitle");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\begin{abstract}");
    _builder.newLine();
    String _tldr = document.getTldr();
    _builder.append(_tldr);
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{abstract}");
    _builder.newLine();
    _builder.newLine();
    String _renderBlocks = this.renderBlocks(document);
    _builder.append(_renderBlocks);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\\end{document}");
    _builder.newLine();
    return _builder;
  }

  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }

  public CharSequence getHeader(final Document document) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\title{");
    String _escapeLatex = this.escapeLatex(document.getTitle());
    _builder.append(_escapeLatex);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.append("\\author{");
    String _escapeLatex_1 = this.escapeLatex(document.getAuthor());
    _builder.append(_escapeLatex_1);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.append("\\date{");
    String _escapeLatex_2 = this.escapeLatex(document.getDatetime().replace("\"", ""));
    _builder.append(_escapeLatex_2);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String renderBlocks(final Document document) {
    String res = "";
    EList<Blocks> _blocks = document.getBlocks();
    for (final Blocks block : _blocks) {
      String _res = res;
      String _renderBlock = this.renderBlock(block);
      res = (_res + _renderBlock);
    }
    return res;
  }

  public String renderBlock(final Blocks block) {
    String res = "";
    String className = block.eClass().getName();
    if (className != null) {
      switch (className) {
        case "Section":
          String _res = res;
          CharSequence _renderBlock = this.renderBlock(((Section) block));
          res = (_res + _renderBlock);
          break;
        case "Subsection":
          String _res_1 = res;
          CharSequence _renderBlock_1 = this.renderBlock(((Subsection) block));
          res = (_res_1 + _renderBlock_1);
          break;
        case "Paragraph":
          String _res_2 = res;
          CharSequence _renderBlock_2 = this.renderBlock(((Paragraph) block));
          res = (_res_2 + _renderBlock_2);
          break;
        case "Image":
          String _res_3 = res;
          CharSequence _renderBlock_3 = this.renderBlock(((Image) block));
          res = (_res_3 + _renderBlock_3);
          break;
        case "CodeBlock":
          String _res_4 = res;
          CharSequence _renderBlock_4 = this.renderBlock(((CodeBlock) block));
          res = (_res_4 + _renderBlock_4);
          break;
        case "Itemize":
          String _res_5 = res;
          CharSequence _renderBlock_5 = this.renderBlock(((Itemize) block));
          res = (_res_5 + _renderBlock_5);
          break;
        default:
          System.err.println(("Error rendering the block" + block));
          break;
      }
    } else {
      System.err.println(("Error rendering the block" + block));
    }
    String _res_6 = res;
    res = (_res_6 + "\n");
    return res;
  }

  public CharSequence renderBlock(final Section section) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\section{");
    String _escapeLatex = this.escapeLatex(section.getTitle());
    _builder.append(_escapeLatex);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Blocks> _blocks = section.getBlocks();
      for(final Blocks b : _blocks) {
        Object _renderBlock = this.renderBlock(b);
        _builder.append(_renderBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence renderBlock(final Subsection subsection) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\subsection{");
    String _escapeLatex = this.escapeLatex(subsection.getTitle());
    _builder.append(_escapeLatex);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Blocks> _blocks = subsection.getBlocks();
      for(final Blocks b : _blocks) {
        Object _renderBlock = this.renderBlock(b);
        _builder.append(_renderBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence renderBlock(final Paragraph paragraph) {
    StringConcatenation _builder = new StringConcatenation();
    String _renderInline = this.renderInline(paragraph.getInlineitems());
    _builder.append(_renderInline);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }

  public String renderInline(final EList<InlineItem> list) {
    String res = "";
    for (final InlineItem inline : list) {
      {
        String className = inline.eClass().getName();
        if (className != null) {
          switch (className) {
            case "Normal":
              Normal normal = ((Normal) inline);
              String _res = res;
              String _escapeLatex = this.escapeLatex(normal.getText());
              res = (_res + _escapeLatex);
              break;
            case "Bold":
              Bold bold = ((Bold) inline);
              String _res_1 = res;
              String _escapeLatex_1 = this.escapeLatex(bold.getText());
              String _plus = ("\\textbf{" + _escapeLatex_1);
              String _plus_1 = (_plus + "}");
              res = (_res_1 + _plus_1);
              break;
            case "Italic":
              Italic italic = ((Italic) inline);
              String _res_2 = res;
              String _escapeLatex_2 = this.escapeLatex(italic.getText());
              String _plus_2 = ("\\textit{" + _escapeLatex_2);
              String _plus_3 = (_plus_2 + "}");
              res = (_res_2 + _plus_3);
              break;
            case "Link":
              Link link = ((Link) inline);
              String _res_3 = res;
              String _url = link.getUrl();
              String _plus_4 = ("\\href{" + _url);
              String _plus_5 = (_plus_4 + "}{");
              String _escapeLatex_3 = this.escapeLatex(link.getText());
              String _plus_6 = (_plus_5 + _escapeLatex_3);
              String _plus_7 = (_plus_6 + "}");
              res = (_res_3 + _plus_7);
              break;
            default:
              String _res_4 = res;
              String _escapeLatex_4 = this.escapeLatex(inline.getText());
              res = (_res_4 + _escapeLatex_4);
              break;
          }
        } else {
          String _res_4 = res;
          String _escapeLatex_4 = this.escapeLatex(inline.getText());
          res = (_res_4 + _escapeLatex_4);
        }
      }
    }
    return res;
  }

  public CharSequence renderBlock(final Image image) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\begin{figure}[htbp]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\\centering");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("% You need to download the image in order to visualize it");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\\includegraphics[width=");
    int _width = image.getWidth();
    _builder.append(_width, "    ");
    _builder.append("pt, height=");
    int _height = image.getHeight();
    _builder.append(_height, "    ");
    _builder.append("pt]{");
    String _url = image.getUrl();
    _builder.append(_url, "    ");
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    {
      String _caption = image.getCaption();
      boolean _tripleNotEquals = (_caption != null);
      if (_tripleNotEquals) {
        _builder.append("    ");
        _builder.append("\\caption{");
        String _escapeLatex = this.escapeLatex(image.getCaption());
        _builder.append(_escapeLatex, "    ");
        _builder.append("}");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\\end{figure}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence renderBlock(final CodeBlock code) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\begin{lstlisting}[language=");
    String _latexLanguageMap = this.latexLanguageMap(code.getLanguage());
    _builder.append(_latexLanguageMap);
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    String _text = code.getText();
    _builder.append(_text);
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{lstlisting}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence renderBlock(final Itemize itemize) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\begin{itemize}");
    _builder.newLine();
    {
      EList<ListItem> _items = itemize.getItems();
      for(final ListItem item : _items) {
        _builder.append("\\item ");
        String _renderInline = this.renderInline(item.getInline());
        _builder.append(_renderInline);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\\end{itemize}");
    _builder.newLine();
    return _builder;
  }

  /**
   * Helper method to escape LaTeX special characters
   */
  public String escapeLatex(final String text) {
    if ((text == null)) {
      return "";
    }
    return text.replace("\\", "\\textbackslash{}").replace("&", "\\&").replace("%", "\\%").replace("$", "\\$").replace("#", "\\#").replace("_", "\\_").replace("{", "\\{").replace("}", "\\}").replace("~", "\\textasciitilde{}").replace("^", "\\textasciicircum{}");
  }

  /**
   * Maps common programming language names to LaTeX listings package language names
   */
  public String latexLanguageMap(final String language) {
    String _lowerCase = language.toLowerCase();
    if (_lowerCase != null) {
      switch (_lowerCase) {
        case "js":
          return "JavaScript";
        case "javascript":
          return "JavaScript";
        case "ts":
          return "JavaScript";
        case "typescript":
          return "JavaScript";
        case "py":
          return "Python";
        case "python":
          return "Python";
        case "cpp":
          return "C++";
        case "c++":
          return "C++";
        case "cs":
          return "C#";
        case "csharp":
          return "C#";
        case "rb":
          return "Ruby";
        case "ruby":
          return "Ruby";
        case "php":
          return "PHP";
        case "html":
          return "HTML";
        case "css":
          return "CSS";
        case "sql":
          return "SQL";
        case "sh":
          return "bash";
        case "bash":
          return "bash";
        case "tex":
          return "TeX";
        case "latex":
          return "TeX";
        case "xml":
          return "XML";
        default:
          return language;
      }
    } else {
      return language;
    }
  }
}
