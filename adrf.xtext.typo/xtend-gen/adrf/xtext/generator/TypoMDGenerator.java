package adrf.xtext.generator;

import adrf.xtext.typoDSL.Blocks;
import adrf.xtext.typoDSL.Bold;
import adrf.xtext.typoDSL.CodeBlock;
import adrf.xtext.typoDSL.Document;
import adrf.xtext.typoDSL.Image;
import adrf.xtext.typoDSL.InlineItem;
import adrf.xtext.typoDSL.Italic;
import adrf.xtext.typoDSL.Itemize;
import adrf.xtext.typoDSL.Link;
import adrf.xtext.typoDSL.ListItem;
import adrf.xtext.typoDSL.Normal;
import adrf.xtext.typoDSL.Paragraph;
import adrf.xtext.typoDSL.Section;
import adrf.xtext.typoDSL.Subsection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates markdown code from your model files on save.
 */
@SuppressWarnings("all")
public class TypoMDGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _className = this.className(resource);
    String _plus = (_className + ".md");
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(_plus, 
      this.toMd(((Document) _head)));
  }

  public CharSequence toMd(final Document document) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("> [!IMPORTANT]");
    _builder.newLine();
    _builder.append("> This document was automatically generated by Typo");
    _builder.newLine();
    CharSequence _header = this.getHeader(document);
    _builder.append(_header);
    _builder.newLineIfNotEmpty();
    String _renderBlocks = this.renderBlocks(document);
    _builder.append(_renderBlocks);
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }

  public CharSequence getHeader(final Document document) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# ");
    String _title = document.getTitle();
    _builder.append(_title);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("**Author**: ");
    String _author = document.getAuthor();
    _builder.append(_author);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("**Date**: ");
    String _replace = document.getDatetime().replace("\"", "");
    _builder.append(_replace);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("**TL;DR**: ");
    String _tldr = document.getTldr();
    _builder.append(_tldr);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("---");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public String renderBlocks(final Document document) {
    String res = "";
    EList<Blocks> _blocks = document.getBlocks();
    for (final Blocks block : _blocks) {
      String _res = res;
      String _renderBlock = this.renderBlock(block);
      res = (_res + _renderBlock);
    }
    return res;
  }

  public String renderBlock(final Blocks block) {
    String res = "";
    String className = block.eClass().getName();
    if (className != null) {
      switch (className) {
        case "Section":
          String _res = res;
          CharSequence _renderBlock = this.renderBlock(((Section) block));
          res = (_res + _renderBlock);
          break;
        case "Subsection":
          String _res_1 = res;
          CharSequence _renderBlock_1 = this.renderBlock(((Subsection) block));
          res = (_res_1 + _renderBlock_1);
          break;
        case "Paragraph":
          String _res_2 = res;
          CharSequence _renderBlock_2 = this.renderBlock(((Paragraph) block));
          res = (_res_2 + _renderBlock_2);
          break;
        case "Image":
          String _res_3 = res;
          CharSequence _renderBlock_3 = this.renderBlock(((Image) block));
          res = (_res_3 + _renderBlock_3);
          break;
        case "CodeBlock":
          String _res_4 = res;
          CharSequence _renderBlock_4 = this.renderBlock(((CodeBlock) block));
          res = (_res_4 + _renderBlock_4);
          break;
        case "Itemize":
          String _res_5 = res;
          CharSequence _renderBlock_5 = this.renderBlock(((Itemize) block));
          res = (_res_5 + _renderBlock_5);
          break;
        default:
          System.err.println(("Error rendering the block" + block));
          break;
      }
    } else {
      System.err.println(("Error rendering the block" + block));
    }
    String _res_6 = res;
    res = (_res_6 + "\n");
    return res;
  }

  public CharSequence renderBlock(final Section section) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("## ");
    String _title = section.getTitle();
    _builder.append(_title);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Blocks> _blocks = section.getBlocks();
      for(final Blocks b : _blocks) {
        Object _renderBlock = this.renderBlock(b);
        _builder.append(_renderBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence renderBlock(final Subsection subsection) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("### ");
    String _title = subsection.getTitle();
    _builder.append(_title);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Blocks> _blocks = subsection.getBlocks();
      for(final Blocks b : _blocks) {
        Object _renderBlock = this.renderBlock(b);
        _builder.append(_renderBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence renderBlock(final Paragraph paragraph) {
    StringConcatenation _builder = new StringConcatenation();
    String _renderInline = this.renderInline(paragraph.getInlineitems());
    _builder.append(_renderInline);
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String renderInline(final EList<InlineItem> list) {
    String res = "";
    for (final InlineItem inline : list) {
      {
        String className = inline.eClass().getName();
        if (className != null) {
          switch (className) {
            case "Normal":
              Normal normal = ((Normal) inline);
              String _res = res;
              String _text = normal.getText();
              res = (_res + _text);
              break;
            case "Bold":
              Bold bold = ((Bold) inline);
              String _res_1 = res;
              String _text_1 = bold.getText();
              String _plus = ("**" + _text_1);
              String _plus_1 = (_plus + "**");
              res = (_res_1 + _plus_1);
              break;
            case "Italic":
              Italic italic = ((Italic) inline);
              String _res_2 = res;
              String _text_2 = italic.getText();
              String _plus_2 = ("*" + _text_2);
              String _plus_3 = (_plus_2 + "*");
              res = (_res_2 + _plus_3);
              break;
            case "Link":
              Link link = ((Link) inline);
              String _res_3 = res;
              String _text_3 = link.getText();
              String _plus_4 = ("[" + _text_3);
              String _plus_5 = (_plus_4 + "]");
              String _plus_6 = (_plus_5 + "(");
              String _url = link.getUrl();
              String _plus_7 = (_plus_6 + _url);
              String _plus_8 = (_plus_7 + ")");
              res = (_res_3 + _plus_8);
              break;
            default:
              String _res_4 = res;
              String _text_4 = inline.getText();
              res = (_res_4 + _text_4);
              break;
          }
        } else {
          String _res_4 = res;
          String _text_4 = inline.getText();
          res = (_res_4 + _text_4);
        }
      }
    }
    String _res = res;
    res = (_res + "\n");
    return res;
  }

  public CharSequence renderBlock(final Image image) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p align=\"center\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<img src=\"");
    String _url = image.getUrl();
    _builder.append(_url, "  ");
    _builder.append("\" width=\"");
    int _width = image.getWidth();
    _builder.append(_width, "  ");
    _builder.append("\" height=\"");
    int _height = image.getHeight();
    _builder.append(_height, "  ");
    _builder.append("\" alt=\"");
    {
      String _caption = image.getCaption();
      boolean _tripleNotEquals = (_caption != null);
      if (_tripleNotEquals) {
        String _caption_1 = image.getCaption();
        _builder.append(_caption_1, "  ");
      } else {
        _builder.append("Image");
      }
    }
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("</p>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence renderBlock(final CodeBlock code) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("```");
    String _language = code.getLanguage();
    _builder.append(_language);
    _builder.newLineIfNotEmpty();
    String _text = code.getText();
    _builder.append(_text);
    _builder.newLineIfNotEmpty();
    _builder.append("```");
    _builder.newLine();
    return _builder;
  }

  public CharSequence renderBlock(final Itemize itemize) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ListItem> _items = itemize.getItems();
      for(final ListItem item : _items) {
        _builder.append("- ");
        String _renderInline = this.renderInline(item.getInline());
        _builder.append(_renderInline);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
